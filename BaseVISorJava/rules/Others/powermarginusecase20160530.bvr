<BaseVISor
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:swrl="http://www.w3.org/2003/11/swrl#"
     xmlns:protege="http://protege.stanford.edu/plugins/owl/protege#"
     xmlns:xsp="http://www.owl-ontologies.com/2005/08/07/xsp.owl#"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:swrlb="http://www.w3.org/2003/11/swrlb#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	 xmlns:scm="http://www.semanticweb.org/yanji/ontologies/2016/0/SCM.owl#"
     xmlns:scmml="http://www.vistology.com/ont/2014/skf/SCMML.owl#"
     xmlns:cro2="http://cogradio.org/ont/CRO2.owl#"
	 xmlns:nuvio="http://cogradio.org/ont/Nuvio.owl#"
	 xmlns:powermargin="http://www.semanticweb.org/yanji/ontologies/2016/2/PowerMarginUseCase.owl#">
	 

<!-- include the OWL 2 RL Axioms -->
<include name="owl2rl"/>

<!-- include scm ontology -->
<include lang="owl2" path="/Users/yanji/Dropbox/Research/ResearchPaper/Proposal/SpringerJournal/Experiment/PowerMarginUseCase/PowerMarginUseCaseOWL/PowerMarginUseCase.owl"/>
<include lang="owl2" path="/Users/yanji/Dropbox/Research/ResearchPaper/Proposal/SpringerJournal/Experiment/PolicyUseCase/SCM20160530.owl"/>
<include lang="owl2" path="/Users/yanji/Dropbox/Research/ResearchWork/OWL/MyOWL/ExtendedCRO/OWLRelated/SCMML/SCMML(Jakub20141117).owl"/>
<include lang="owl2" path="/Users/yanji/Dropbox/Research/ResearchWork/OWL/CRO/CROv2ByJakub/CRO2.owl"/>
<include lang="owl2" path="/Users/yanji/Dropbox/Research/ResearchWork/OWL/CRO/CROv2ByJakub/Nuvio.owl"/>

<rule name="Detect whether power margin exists between spectrum mask in receiver side and its underlay mask" salience = "0">
  <body>
    <!--Find all transmitters and receivers in our detection field-->
    <Individual variable="ATransmitter" rdf:type="cro2:Transmitter"/>  
	<Individual variable="AReceiver" rdf:type="cro2:Receiver"/>
	
	<!--We only concern about whether signal from interfering transmitter interferes with receiver-->
    <not>
	  <Individual variable="ATransmitter">
	    <scm:transmitTo variable="AReceiver"/>
	  </Individual>
	</not>
	
	<!--Get all values for transmitter-->
	<Individual variable="ATransmitter"> 
	  <scmml:hasModel variable="ConstructsForATransmitter">
	    <scmml:hasSpectrum_Mask variable="SpectrumMaskForATransmitter">
		  <scmml:hasSignal_Mask variable="PDSMaskOfSpectrumMaskForATransmitter">
		    <scmml:hasBandwidth_Unit variable="BandwidthOfPDSMaskOfSpectrumMask">
			  <scmml:hasValue variable="BandwidthValueOfPDSMaskOfSpectrumMask"/>
			</scmml:hasBandwidth_Unit>
			<scm:hasSegment variable="SegmentOfPDSMaskOfSpectrumMask">
			  <scm:hasLeftInflectionPoint variable="LeftInflectionPointOfSegmentOfPDSMaskOfSepctrumMask">
			    <scmml:hasFrequency variable="FrequencyOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask">
				  <scmml:hasValue variable="FrequencyValueOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
				</scmml:hasFrequency>
				<scmml:hasRelative_Power variable="RelativePowerOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask">
				  <scmml:hasValue variable="RelativePowerValueOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
				</scmml:hasRelative_Power>
			  </scm:hasLeftInflectionPoint>		    
			  <scm:hasRightInflectionPoint variable="RightInflectionPointOfSegmentOfPDSMaskOfSepctrumMask">
			    <scmml:hasFrequency variable="FrequencyOfRightInflectionPointOfSegmentOfPDSMaskOfSpectrumMask">
				  <scmml:hasValue variable="FrequencyValueOfRightInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
				</scmml:hasFrequency>
				<scmml:hasRelative_Power variable="RelativePowerOfRightInflectionPointOfSegmentOfPDSMaskOfSpectrumMask">
				  <scmml:hasValue variable="RelativePowerValueOfRightInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
				</scmml:hasRelative_Power>
			  </scm:hasRightInflectionPoint>
			</scm:hasSegment>
		  </scmml:hasSignal_Mask>
		</scmml:hasSpectrum_Mask>
		<scmml:hasLocation variable="LocationForATransmitter"/>
	  </scmml:hasModel>
	</Individual>
	
	<!--Get all values for receiver-->
	<Individual variable="AReceiver">
	  <scmml:hasModel variable="ConstructsForAReceiver">
	    <scmml:hasUnderlay_Mask variable="UnderlayMaskForAReceiver">
		  <scmml:hasMask variable="PDSMaskOfUnderlayMaskForAReceiver">
		    <scmml:hasBandwidth_Unit variable="BandwidthOfPDSMaskOfUnderlayMask">
			  <scmml:hasValue variable="BandwidthValueOfPDSMaskOfUnderlayMask"/>
			</scmml:hasBandwidth_Unit>
			<scm:hasSegment variable="SegmentOfPDSMaskOfUnderlayMask">
			  <scm:hasLeftInflectionPoint variable="LeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask">
			    <scmml:hasFrequency variable="FrequencyOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask">
				  <scmml:hasValue variable="FrequencyValueOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
				</scmml:hasFrequency>
				<scmml:hasRelative_Power variable="RelativePowerOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask">
				  <scmml:hasValue variable="RelativePowerValueOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
				</scmml:hasRelative_Power>
			  </scm:hasLeftInflectionPoint>
			  <scm:hasRightInflectionPoint variable="RightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask">
			    <scmml:hasFrequency variable="FrequencyOfRightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask">
				  <scmml:hasValue variable="FrequencyValueOfRightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
				</scmml:hasFrequency>
				<scmml:hasRelative_Power variable="RelativePowerOfRightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask">
				  <scmml:hasValue variable="RelativePowerValueOfRightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
				</scmml:hasRelative_Power>
			  </scm:hasRightInflectionPoint>
			</scm:hasSegment>
		  </scmml:hasMask>
		</scmml:hasUnderlay_Mask>
		<!--The location of constructs of receiver should be the same as the one of constructs of transmitter-->
		<scmml:hasLocation variable="LocationForATransmitter"/>
	  </scmml:hasModel>
	</Individual>
	
	<!--We are interested in the segments from either transmitter side or receiver side that are parallel to x axis -->
	<eq>
	  <param variable="RelativePowerValueOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
	  <param variable="RelativePowerValueOfRightInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>  
	</eq>	
    <eq>
	  <param variable="RelativePowerValueOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
	  <param variable="RelativePowerValueOfRightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>  
	</eq>
	
	<!--Frequency value of right inflection point from spectrum mask should be greater or equal to the one of left 
	inflection point from underlay mask-->
	<geq>
	  <param variable="FrequencyValueOfRightInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
	  <param variable="FrequencyValueOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
	</geq>
	
    <!--Frequency value of left inflection point from spectrum mask should be less than or equal to the one of right
	inflection point from underlay mask-->
    <leq>
	  <param variable="FrequencyValueOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
	  <param variable="FrequencyValueOfRightInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
	</leq>
	
	<!--Judge whether power margin exists-->
	<geq>
	  <!--Convert both the underlay mask and the interfering signal's spectrum mask to the same resolution bandwidth-->
	  <add>
	    <param variable="RelativePowerValueOfLeftInflectionPointOfSegmentOfPDSMaskOfSpectrumMask"/>
		<multiply>
          <param variable="BandwidthValueOfPDSMaskOfUnderlayMask"/>
	      <dpower>
            <param variable="BandwidthValueOfPDSMaskOfSpectrumMask"/>
		    <param datatype="xsd:double">-1</param>
          </dpower>
        </multiply>
	  </add>
	  <param variable="RelativePowerValueOfLeftInflectionPointOfSegmentOfPDSMaskOfUnderlayMask"/>
	</geq>
  </body>

  <head>
	<!--If all conditions above satisfy, we can assert that a transmitter will interfere a receiver>
    <println><substringAfter><param variable="ATransmitter"/><param>:</param></substringAfter> will interfere <substringAfter><param variable="AReceiver"/><param>:</param></substringAfter></println-->
   <assert>
      <Individual variable="ATransmitter" rdf:type="owl:NamedIndividual">
          <powermargin:interfere variable="AReceiver"/>
      </Individual>
   </assert>
  </head>
</rule>
</BaseVISor>